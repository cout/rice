#ifndef Rice__detail__wrap_function__ipp_
#define Rice__detail__wrap_function__ipp_

// This is a generated file.  DO NOT EDIT!!


// This causes problems with certain C++ libraries
#undef TYPE

#include "Auto_Function_Wrapper.hpp"
#include "Auto_Member_Function_Wrapper.hpp"
namespace Rice
{

namespace detail
{

template<typename Ret_T>
Wrapped_Function * wrap_function(
    Ret_T (*func)(),
    Data_Object<Exception_Handler> handler,
    Arguments* arguments)
{
  typedef Ret_T (*Func)();
  return new Auto_Function_Wrapper<Func, Ret_T>(func, handler, arguments);
}

{{#entries}}
template<typename Ret_T, {{typenames}}>
Wrapped_Function * wrap_function(
    Ret_T (*func)({{argument_types}}),
    Data_Object<Exception_Handler> handler,
    Arguments* arguments)
{
  typedef Ret_T (*Func)({{argument_types}});
  return new Auto_Function_Wrapper<Func, Ret_T, {{argument_types}}>(func, handler, arguments);
}

template<typename Ret_T, {{self_typenames}}>
Wrapped_Function * wrap_function(
    Ret_T (Self_T::*func)({{self_argument_types}}),
    Data_Object<Exception_Handler> handler,
    Arguments* arguments)
{
  typedef Ret_T (Self_T::*Func)({{self_argument_types}});
  return new Auto_Member_Function_Wrapper<Func, Ret_T, {{self_arg_types_with_self}}>(func, handler, arguments);
}

template<typename Ret_T, {{self_typenames}}>
Wrapped_Function * wrap_function(
    Ret_T (Self_T::*func)({{self_argument_types}}) const,
    Data_Object<Exception_Handler> handler,
    Arguments* arguments)
{
  typedef Ret_T (Self_T::*Func)({{self_argument_types}}) const;
  return new Auto_Member_Function_Wrapper<Func, Ret_T, {{self_arg_types_with_self}}>(func, handler, arguments);
}

// ---------------------------------------------------------------------

{{/entries}}
} // namespace detail

} // namespace Rice


#endif // Rice__detail__wrap_function__ipp_

