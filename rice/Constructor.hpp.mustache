#ifndef Rice__Constructor__hpp_
#define Rice__Constructor__hpp_

// This is a generated file.  DO NOT EDIT!!


// This causes problems with certain C++ libraries
#undef TYPE

#include "to_from_ruby_defn.hpp"
#include "detail/method_data.hpp"
namespace Rice
{
#ifdef DOXYGEN
//! Define a Type's Constructor and it's arguments.
/*! E.g. for the default constructor on a Type:
    \code
      define_class<Test>()
        .define_constructor(Constructor<Test>());
    \endcode
 *
 *  The first template type must be the type being wrapped.
 *  Afterwards any extra types must match the appropriate constructor
 *  to be used in C++ when constructing the object.
 *
 *  For more information, see Rice::Data_Type::define_constructor.
 */
template<typename T, typename ArgTypes, ...>
class Constructor
{
};

#else

  template<typename T, {{void_templates}}>
  class Constructor
  {
  private:
    Constructor()
    {
    }
  };

  template<typename T>
  class Constructor<T, {{voids}}>
  {
  public:
    static void construct(Object self)
    {
      DATA_PTR(self.value()) = new T();
    }
  };


  template<typename T>
  class Constructor<T, Object, {{voids_self}}>
  {
  public:
    static void construct(Object self)
    {
      DATA_PTR(self.value()) = new T(self);
    }
  };

  {{#selfs}}
    {{#entries}}

    {{! The extra 'void' at the end here is a work around to a bug with GCC}}
    template<typename T, {{typenames}}>
    class Constructor<T, {{self_type}}{{types_and_voids_list}}, void>
    {
      public:
        static void construct(Object self, {{parameters}})
        {
          DATA_PTR(self.value()) = new T({{with_self}}{{arguments}});
        }
    };

    {{/entries}}
  {{/selfs}}

#endif // DOXYGEN

} // namespace Rice


#endif // Rice__Constructor__hpp_

